library(mytestpackage)
my_calc(1:10, mean)
library(mytestpackage)
devtools::load_all(".")
my_calc(1:10, mean)
library(mytestpackage)
library(mytestpackage)
devtools::load_all(".")
?mycalc
?my_calc
devtools::load_all(".")
?my_calc
?my_calc
library(mytestpackage)
detach("package:mytestpackage", unload = TRUE)
devtools::load_all(".")
?my_calc
devtools::load_all(".")
?my_calc
#' Title
#'
#' @param x A data frame
#' @param column
#' @param col_name
#'
#' @return
#' @export
#'
#' @examples
outlier_r <- function(x,column,col_name) {
column_p <- paste(", column ,")
Q <- quantile(x[[column_p]], probs = c(.25,.75), na.rm = FALSE)
iqr <- IQR(x[[column_p]])
up <- Q[2]+1.5*iqr
low <- Q[1]-1.5*iqr
outliers_removed <- x %>%
filter(col_name > low & col_name < up)
return(outliers_removed)
}
ages <-c(20,15,22,24,25,24,23,23,23,25,24,25,100,0)
data_df <- data.frame(ages)
outlier_r(data_df, ages, ages)
ages <-c(20,15,22,24,25,24,23,23,23,25,24,25,100,0)
data_df <- data.frame(ages)
outlier_r <- function(x,column,col_name) {
column_p <- paste(", column ,")
Q <- quantile(x[[column_p]], probs = c(.25,.75), na.rm = FALSE)
iqr <- IQR(x[[column_p]])
up <- Q[2]+1.5*iqr
low <- Q[1]-1.5*iqr
outliers_removed <- x %>%
filter(col_name > low & col_name < up)
return(outliers_removed)
}
outlier_r(data_df, ages, ages)
print('/"')
print('/')
print('')
cat('" "','xml','" "')
cat('" "',col,'" "')
outlier_r <- function(x,column,col_name) {
column_p <- cat('" ',col,' "')
Q <- quantile(x[[column_p]], probs = c(.25,.75), na.rm = FALSE)
iqr <- IQR(x[[column_p]])
up <- Q[2]+1.5*iqr
low <- Q[1]-1.5*iqr
outliers_removed <- x %>%
filter(col_name > low & col_name < up)
return(outliers_removed)
}
cat('" ',col,' "')
cat('" ',cola,' "')
cola = hi
devtools::load_all(".")
devtools::load_all(".")
ages <-c(20,15,22,24,25,24,23,23,23,25,24,25,100,0)
data_df <- data.frame(ages)
outlier_r(data_df, "ages", ages)
outlier_r(data_df, "ages", ages)
outlier_r <- function(x,column,col_name) {
Q <- quantile(x[[column]], probs = c(.25,.75), na.rm = FALSE)
iqr <- IQR(x[[column]])
up <- Q[2]+1.5*iqr
low <- Q[1]-1.5*iqr
outliers_removed <- x %>%
filter(col_name > low & col_name < up)
return(outliers_removed)
}
outlier_r <- function(x,column,col_name) {
Q <- quantile(x[[column]], probs = c(.25,.75), na.rm = FALSE)
iqr <- IQR(x[[column]])
up <- Q[2]+1.5*iqr
low <- Q[1]-1.5*iqr
outliers_removed <- x %>%
filter(col_name > low & col_name < up)
return(outliers_removed)
}
library(mytestpackage)
library(mytestpackage)
ages <-c(20,15,22,24,25,24,23,23,23,25,24,25,100,0)
data_df <- data.frame(ages)
outlier_r(data_df, "ages", ages)
library(mytestpackage)
ages <-c(20,15,22,24,25,24,23,23,23,25,24,25,100,0)
data_df <- data.frame(ages)
outlier_r(data_df, "ages", ages)
library(mytestpackage)
ages <-c(20,15,22,24,25,24,23,23,23,25,24,25,100,0)
data_df <- data.frame(ages)
outlier_r(data_df, "ages", ages)
library(mytestpackage)
outlier_r <- function(x,column,col_name) {
Q <- quantile(x[[column]], probs = c(.25,.75), na.rm = FALSE)
iqr <- IQR(x[[column]])
up <- Q[2]+1.5*iqr
low <- Q[1]-1.5*iqr
outliers_removed <- x %>%
filter(col_name > low & col_name < up)
return(outliers_removed)
}
